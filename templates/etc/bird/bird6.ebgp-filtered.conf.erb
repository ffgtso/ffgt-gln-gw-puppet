# this is file is generated by puppet

template bgp ebgp_filt_<%=@name.gsub('-', '_')%> {
  table mesh;
  local as <%= @our_as %>;
  import none;
  export none;
  next hop self;
}

define BOGON_ASNS = [0, 23456, 64496..131071, 4200000000..4294967295];

<% peerings = YAML.load_file(@gre_yaml); -%>
<% peerings.each_pair do |tunnelname,node| -%>
<% if (defined?(node['ouras']) && node['ouras']) then local_ouras=node['ouras']; else local_ouras=@our_as; end -%>

<% if defined?(node['ipv6dst']) && node['ipv6dst'] -%>
filter peer_in_<%=node['name'].gsub('-', '_')%>_<%=@name.gsub('-', '_')%>
prefix set <%=node['import6'].gsub('-', '_').gsub(':', '__')%>_PFX;
<% if defined?(node['reimport_filter6']) && node['reimport_filter6']  -%>
<% if node['reimport_filter6'] != "ANY" && node['reimport_filter6'] != "DEFONLY" -%>
prefix set <%=node['reimport_filter6'].gsub('-', '_').gsub(':', '__')%>_PFX;
<% end -%>
<% end -%>
int set bogon_asns;
{
<% if defined?(node['bgpmaxpfxlen6']) && node['bgpmaxpfxlen6']
     bgp_max_pfx_len = Integer(node['bgpmaxpfxlen6'])
   else
     bgp_max_pfx_len = 48
   end -%>
<% if defined?(node['community_in']) && node['community_in']
     community_in = Integer(node['community_in'])
   else
     community_in = 0
   end -%>
  # Scrub BLACKHOLE Community from peering partners
  bgp_community.delete((65535, 666));

<% if defined?(node['import_filter6']) && node['import_filter6'] -%>
  # Initially, to do special-case rejects
  include "/etc/bird/bird6.conf.d/<%=node['import_filter6']%>";

<% end -%>
  # ignore bogon AS_PATHs
  bogon_asns = BOGON_ASNS;
  if (bgp_path ~ bogon_asns) then {
    print "Import rejected: bogon AS_PATH: ", net, " ", bgp_path;
    reject;
  }
<% if defined?(node['import6']) && node['import6'] -%>
<% if node['import6'] == "ANY" -%>
  if (avoid_martians() && (net ~ [2000::/3{12,<%= bgp_max_pfx_len %>}])) then {
<% else -%>
<% if node['import6'] == "DEFONLY" -%>
  if (is_default()) then {
<% else -%>
  include "/etc/bird/bird6.conf.d/<%= node['import6'] %>_PFX6.inc";
  if (net ~ <%= node['import6'].gsub('-', '_').gsub(':', '__') %>_PFX) then {
<% end -%>
<% end -%>
<% if defined?(node['reimport_filter6']) && node['reimport_filter6'] -%>
<% if node['reimport_filter6'] != "ANY" && node['reimport_filter6'] != "DEFONLY" -%>
    # Don't import our prefixes we'll export
    include "/etc/bird/bird6.conf.d/<%=node['reimport_filter6']%>_PFX6.inc";
    if (net ~ <%=node['reimport_filter6'].gsub('-', '_').gsub(':', '__')%>_PFX) then {
      print "REJECT: Import of own export prefix: ", net, " via ", bgp_path;
      reject;
    }

<% end -%>
<% end -%>
    bgp_med = 0;
<% if defined?(node['bgppref']) && node['bgppref'] -%>
    bgp_local_pref = <%= node['bgppref'] %>;
<% else -%>
    bgp_local_pref = 100;
<% end -%>
<% if defined?(node['import_filter6']) && node['import_filter6'] -%>

  # Again; this time to modify route attributes.
  include "/etc/bird/bird6.conf.d/<%=node['import_filter6']%>";
<% end -%>

    # Scrub BGP Communities (RFC 7454 Section 11)
<% if Integer(local_ouras) < 65536 -%>
    bgp_community.delete([(<%=local_ouras%>, *)]);
    bgp_community.add((<%=local_ouras%>,1)); /* mark peering routes as peering routes */
<% end -%>
    bgp_large_community.delete([(<%=local_ouras%>, 0, *), (<%=local_ouras%>, 5, *), (<%=local_ouras%>, 6, *)]);
    bgp_large_community.add((<%=local_ouras%>, <%=community_in%>, <%= node['peeras'] %>));
    accept;
  }
<% else -%>
  # No import6: line found
<% end -%>
  reject;
}

filter peer_out_<%=node['name'].gsub('-', '_')%>_<%=@name.gsub('-', '_')%>
prefix set <%=node['export6'].gsub('-', '_').gsub(':', '__')%>_PFX;
int set bogon_asns;
{
<% if defined?(node['export_filter6']) && node['export_filter6'] -%>
  include "/etc/bird/bird6.conf.d/<%=node['export_filter6']%>";
<% end -%>
<% if @sitelocal_prefix != "none" -%>
  if (net ~ [ <%=@sitelocal_prefix%> ]) then {
    print "Forced export: ", net, " ", bgp_path;
<% if defined?(node['bgpprepend']) && node['bgpprepend'] -%>
    # Path Prepending: <%=node['bgpprepend']%> times (1<=n<=5)
<% numprep=Integer(node['bgpprepend']) -%>
<% if (numprep<1) then numprep=1; end -%>
<% if (numprep>5) then numprep=5; end -%>
<% for i in 1..numprep do -%>
    bgp_path.prepend(<%=local_ouras%>);
<% end -%>
<% end -%>
    accept;
  }
<% end -%>
<% if @no_export_prefix != "none" -%>
  if (net ~ [ <%=@no_export_prefix%> ]) then  {
    print "Blocked export: ", net, " ", bgp_path;
    reject;
  }
<% end -%>

<% if defined?(node['export6']) && node['export6'] -%>
<% if node['export6'] == "ANY" -%>
  if (avoid_martians() && (net ~ [2000::/3{12,48}])) then {
<% else -%>
<% if node['export6'] == "DEFONLY" -%>
  if (is_default()) then {
<% else -%>
  include "/etc/bird/bird6.conf.d/<%=node['export6']%>_PFX6.inc";
  if (net ~ <%=node['export6'].gsub('-', '_').gsub(':', '__')%>_PFX) then {
<% end -%>
<% end -%>
    # ignore bogon AS_PATHs
    bogon_asns = BOGON_ASNS;
    if (bgp_path ~ bogon_asns) then {
      print "Export rejected: bogon AS_PATH: ", net, " ", bgp_path;
      reject;
    }

    if ((65535, 65281) ~ bgp_community) then {
      print "Export rejected: no-export community set: ", net, " ", bgp_path;
      reject;
    }

    if ((65535, 65282) ~ bgp_community) then {
      print "Export rejected: no-advertise community set: ", net, " ", bgp_path;
      reject;
    }

    if ((<%=local_ouras%>, 2, <%=node['peeras']%>) ~ bgp_large_community || (<%=local_ouras%>, 2, 0) ~ bgp_large_community) then {
      bgp_path.prepend(<%=local_ouras%>);
    } else if ((<%=local_ouras%>, 3, <%=node['peeras']%>) ~ bgp_large_community || (<%=local_ouras%>, 3, 0) ~ bgp_large_community) then {
      bgp_path.prepend(<%=local_ouras%>);
      bgp_path.prepend(<%=local_ouras%>);
    }
    if ((<%=local_ouras%>, 4, <%=node['peeras']%>) ~ bgp_large_community || (<%=local_ouras%>, 4, 0) ~ bgp_large_community) then {
      reject;
    }

<% if defined?(node['bgpprepend']) && node['bgpprepend'] -%>
    # Path Prepending: <%=node['bgpprepend']%> times (1<=n<=5)
<% numprep=Integer(node['bgpprepend']) -%>
<% if (numprep<1) then numprep=1; end -%>
<% if (numprep>5) then numprep=5; end -%>
<% for i in 1..numprep do -%>
    bgp_path.prepend(<%=local_ouras%>);
<% end -%>
<% end -%>
    accept;
  }
<% else -%>
  # No export6: line found
<% end -%>
  reject;
}

protocol bgp e_<%=node['name'].gsub('-', '_')%>_<%=@name.gsub('-', '_')%> from ebgp_filt_<%=@name.gsub('-', '_')%> {
  local as <%=local_ouras%>;
  source address <%= node['ipv6src'] %>;
  neighbor <%= node['ipv6dst'] %><% if node['ipv6dst'].match(/^fe80/i) %> % '<%= tunnelname %>'<% end -%> as <%= node['peeras'] %>;
  import keep filtered;
  import filter peer_in_<%=node['name'].gsub('-', '_')%>_<%=@name.gsub('-', '_')%>;
  export filter peer_out_<%=node['name'].gsub('-', '_')%>_<%=@name.gsub('-', '_')%>;
<% if defined?(node['multihop']) && node['multihop'] -%>  multihop <%= node['multihop'] %>;
<% end -%>
<% if defined?(node['direct']) && node['direct'] -%>  direct;
<% end -%>
<% if defined?(node['passwd6']) && node['passwd6'] -%>  password "<%= node['passwd6'] %>";
<% else -%>
<% if defined?(node['passwd']) && node['passwd'] -%>  password "<%= node['passwd'] %>";
<% end -%>
<% end -%>
<% if defined?(node['exportlimit6']) && node['exportlimit6'] -%>  export limit <%=node['exportlimit6']%> action block;
<% end -%>
};


<% end -%>
<% end -%>
