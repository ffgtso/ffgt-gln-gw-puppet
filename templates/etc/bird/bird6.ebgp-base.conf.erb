# this is file is generated by puppet

# return true on any route ...
function in_prefix_range_ebgp() {
  if net.len < 16 then return false;
  if net.len > 56 then return false;
  return true;
}

<% if @ipv6_main_prefix.to_s != "" -%>
# FIXME, this is basically a duplicate.
protocol static local_<%= @mesh_code.gsub('-', '_') %>_2 {
  table mesh;
  # reject route if announced from external
  route <%= @ipv6_main_prefix %> reject;
};

<% end -%>

function is_global_unicast() {
  return net ~ [ 2000::/3+ ];
}

#function rt_import(int asn; int set peer_asns; prefix set peer_nets)
#{
#  if ! (net ~ peer_nets) then return false;
#  if ! (bgp_path.last ~ peer_asns) then return false;
#  if bgp_path.first != asn then return false;
#  if bgp_path.len > 64 then return false;
#  if bgp_next_hop != from then return false;
#  return true;
#}

#function rt_import_all(int asn)
#{
#  if net_martian() || net_local() then return false;
#  if bgp_path.first != asn then return false;
#  if bgp_path.len > 64 then return false;
#  if bgp_next_hop != from then return false;
#  return true;
#}

filter import_ebgp_friend {
  if is_default() then accept;
  if is_global_unicast() && in_prefix_range_ebgp() then accept;
  reject;
}

filter export_ebgp_friend {
  if is_default() then accept;
  if is_global_unicast() && in_prefix_range_ebgp() then accept;
  reject;
}

filter import_ebgp_peer {
  if is_global_unicast() && ! is_in_<%= @mesh_code.gsub('-', '_') %>_prefix() then accept;
  reject;
}

filter export_ebgp_peer {
  if is_self_<%= @mesh_code.gsub('-', '_') %>() then accept;
  reject;
}

filter import_ebgp_transit {
  if is_default() then accept;
  if is_global_unicast() then accept;
  reject;
}

filter export_ebgp_transit {
  if (source = RTS_BGP || source = RTS_STATIC_DEVICE || source = RTS_STATIC) then {
    if is_self_<%= @mesh_code.gsub('-', '_') %>() then accept;
  }
  reject;
}

# template for ebgp route exchange
template bgp ebgp {
  table mesh;
  local as <%= @our_as %>;
};
