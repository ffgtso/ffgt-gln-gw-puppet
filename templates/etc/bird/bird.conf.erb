# this file is generated by puppet
#
# ff_gln_gw bird base configuration 
#
# This file defines basic templates, base protocols and
# finally pulls in every file suffixed with .conf inside 
# of "/etc/bird.conf.d/". So if you like to add aditional
# protocols create a file in that directory.

router id <%= @router_id %>;

# The mesh table is the main table which is piped
# into the kernel table. Every mesh specific
# table exports it routes to the mesh table and import
# routes which are not in the mesh specific prefix.
# The mesh_${site} tables exchange routes with the local
# peers from here routes to local subnets are communicated 
# and routes to other communities from icvpn peers in the local
# network are exchanged. 
# 
# If this router is a icvpn peer then routes from the
# icvpn will be exchanged directly with the mesh table.
#              
# icvpn <-> [mesh] <#> [mesh_ffgc,..] <#> local-peers
#             ^--------> [kernel(rtable=42)]
table mesh;
table kernel_main;

# Filter function to check if an IPv4 route is from Freifunk IP range.
# We do not include 104.0.0.0/8+ here anymore
function is_freifunk() {
  return (net ~ [ 10.0.0.0/8{8,24} ]);
};

# Filter function to check if an IPv4 route is from ChaosVPN IP range.
# as of http://wiki.hamburg.ccc.de/ChaosVPN:IPRanges#ChaosVPN_IP_Ranges
function is_chaos() {
  return (net ~ [ 10.4.0.0/16{16,24},
    10.32.0.0/16{16,24},
    10.100.0.0/14{14,24},
    10.104.0.0/14{14,24},
    172.31.0.0/16{16,24}
  ]);
};

# Filter function to check if an IPv4 route is from DN42.net IP range.
function is_dn42() {
  return (net ~ [ 172.20.0.0/14{14,24} ]);
};

function avoid_martians()
prefix set martians;
{
  martians = [ 169.254.0.0/16+, 172.16.0.0/12+, 100.64.0.0/10+,
        192.168.0.0/16+, 10.0.0.0/8+, 127.0.0.0/8+,
        224.0.0.0/4+, 240.0.0.0/4+, 192.0.0.0/24+,
        192.88.99.0/24+, 198.18.0.0/15+, 198.51.100.0/24+,
        203.0.113.0/24+, 0.0.0.0/32-, 0.0.0.0/0{31,32}, 0.0.0.0/0{0,7} ];

  if net ~ martians then return false;

  return true;
}

function is_global_unicast() {
  return avoid_martians();
}

function ok_for_ebgp_export()
int set reserved_asn;
{
	# http://www.iana.org/assignments/as-numbers/as-numbers.xhtml
	reserved_asn = [
		# 16-bit
		0,                      # Reserved. RFC7607
		23456,                  # AS_TRANS. RFC6793
		64496..64511,           # Reserved for use in documentation and sample code. RFC5398
		64512..65534,           # Reserved for Private Use. RFC6996
		65535,                  # Reserved. RFC7300

		# 32-bit
		65536..65551,           # Reserved for use in documentation and sample code. RFC5398
		65552..131071,          # Reserved.
		4200000000..4294967294, # Reserved for Private Use. [RFC6996]
		4294967295              # Reserved. RFC7300
    ];
    # Avoid too short and too long prefixes
    if (net.len < 8) || (net.len > 24) then {
        #print "Reject: prefix ", net, " too short or too long";
        return false;
    }

    # Remove default route
    #if net = 0.0.0.0/0 then {
    #    #print "Reject: prefix ", net, " defines a default route";
    #    return false;
    #}

    # Avoid reserved networks
    if ! avoid_martians() then {
        #print "Reject: prefix ", net, " is a Martian";
        return false;
    }

    # AS_PATH too long (max seen in real life = 54)
    if bgp_path.len > 64 then return false;

    # Don't accept if path contains a reserved AS
    # Disabled because it removes legit prefixes
    if bgp_path ~ reserved_asn then {
        print "Reject: prefix ", net, " contains a reserved ASN in it's BGP path ", bgp_path;
        return false;
    }

    if ( (65535, 65281) ~ bgp_community ) then {
        #print "Reject: prefix ", net, " has the no_export community set";
        return false;
    }

    return true;
}

function check_communities_ebgp_export() {
    if ( (65535, 65281) ~ bgp_community ) then {
        print "Reject: prefix ", net, " has the no_export community set";
        return false;
    }
}

# Check for the IPv4 default route and it's more specific nephew
function is_default() {
  return (net ~ [0.0.0.0/0, 0.0.0.0/1, 128.0.0.0/1]);
}

# don't use kernel's routes for bird, but export bird's
# routes to kernel table 42. 
#
# We do not import any routes here, therefore we can be sure
# that no funny routes jump into our waggon.
protocol kernel {
  scan time 20;    # Scan kernel routing table every 20 seconds
  kernel table 42; # routing table for mesh networks
  import none;     # Import no routes
  #export all;      # Export all routes
  export filter {
    if (avoid_martians()) then { krt_prefsrc = <%= @loopback_ipv4 %>; }
    accept;
  };
};

# export to kernel main table for local services
protocol kernel {
  table kernel_main;
  scan time 20;
  import none;
  #export all;
  export filter {
    if (source = RTS_BGP && avoid_martians()) then { krt_prefsrc = <%= @loopback_ipv4 %>; }
    accept;
  };
  persist;
};

# This pseudo-protocol watches all interface up/down events.
protocol device {
  scan time 10; # Scan interfaces every 10 seconds 
};

# pipe between mesh table and kernel table
# import everything from mesh table into 
# kernel table and export no routes into mesh.
protocol pipe pipe_kernel_mesh {
  peer table mesh;
  import all;
  export none;
};

protocol pipe pipe_kernel_main_mesh {
  table kernel_main;
  peer table mesh;
  import all;
  export none;
};

# template for local route exchange via bgp
template bgp local_mesh {
  import where is_freifunk()<% if @include_chaos == "yes" %> || is_chaos()<% end %><% if @include_dn42 == "yes" %> || is_dn42()<% end %>;
  export where source = RTS_BGP;
  direct;
  next hop self;
};

# Include puppet generated rules
